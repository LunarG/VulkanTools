{
    "file_format_version": "1.4.0",
    "layer": {
        "name": "VK_LAYER_LUNARG_gfxreconstruct",
        "type": "GLOBAL",
        "library_path": ".\\VkLayer_gfxreconstruct.dll",
        "api_version": "1.2.154",
        "implementation_version": "36867",
        "description": "GFXReconstruct Capture Layer Version 0.9.3",
        "device_extensions": [
            {
                "name": "VK_EXT_tooling_info",
                "spec_version": "1",
                "entrypoints": [ "vkGetPhysicalDeviceToolPropertiesEXT" ]
            }
        ],
        "presets": [
            {
                "label": "Initialization",
                "description": "Capture the applications first two frames.",
                "platforms": [ "WINDOWS", "LINUX" ],
                "status": "STABLE",
                "settings": [
                    {
                        "key": "capture_trigger",
                        "value": ""
                    },
                    {
                        "key": "capture_frames",
                        "value": "1-2"
                    },
                    {
                        "key": "memory_tracking_mode",
                        "value": "unassisted"
                    }
                ]
            },
            {
                "label": "Range",
                "description": "Capture a range of frames",
                "platforms": [ "WINDOWS", "LINUX" ],
                "status": "STABLE",
                "settings": [
                    {
                        "key": "capture_trigger",
                        "value": "F5"
                    },
                    {
                        "key": "capture_frames",
                        "value": ""
                    },
                    {
                        "key": "memory_tracking_mode",
                        "value": "page_guard"
                    }
                ]
            }
        ],
        "settings": [
            {
                "key": "capture_trigger",
                "label": "Hotkey Capture Trigger",
                "description": "Specify a hotkey (any one of F1-F12, TAB, CONTROL) that will be used to start/stop capture. Example: F3 will set the capture trigger to F3 hotkey. One capture file will be generated for each pair of start/stop hotkey presses. Default is: Empty string (hotkey capture trigger is disabled).",
                "type": "enum",
                "options": {
                    "": "None",
                    "F1": "F1",
                    "F2": "F2",
                    "F3": "F3",
                    "F4": "F4",
                    "F5": "F5",
                    "F6": "F6",
                    "F7": "F7",
                    "F8": "F8",
                    "F9": "F9",
                    "F10": "F10",
                    "F11": "F11",
                    "F12": "F12",
                    "TAB": "TAB",
                    "CONTROL": "CONTROL"
                },
                "default": ""
            },
            {
                "key": "capture_frames",
                "label": "Capture Specific Frames",
                "description": "Specify one or more comma-separated frame ranges to capture. Each range will be written to its own file. A frame range can be specified as a single value, to specify a single frame to capture, or as two hyphenated values, to specify the first and last frame to capture. Frame ranges should be specified in ascending order and cannot overlap. Note that frame numbering is 1-based (i.e. the first frame is frame 1). Example: 200,301-305 will create two capture files, one containing a single frame and one containing five frames. Default is: Empty string (all frames are captured).",
                "type": "string",
                "default": ""
            },
            {
                "key": "capture_file",
                "label": "Capture File Name",
                "description": "Path to use when creating the capture file. Default is: gfxrecon_capture.gfxr",
                "type": "save_file",
                "default": "${LOCAL}/gfxrecon_capture.gfxr"
            },
            {
                "key": "capture_file_timestamp",
                "label": "Capture File Name with Timestamp",
                "description": "Add a timestamp (yyyymmddThhmmss) postfix to the capture file name.",
                "type": "bool",
                "default": "TRUE"
            },
            {
                "key": "capture_file_flush",
                "label": "Capture File Flush After Write",
                "description": "Flush output stream after each packet is written to the capture file. Default is: false.",
                "type": "bool",
                "default": "TRUE"
            },
            {
                "key": "capture_compression_type",
                "label": "Compression Format",
                "description": "Compression format to use with the capture file. Valid values are: LZ4, ZLIB, ZSTD, and NONE. Default is: LZ4",
                "type": "enum",
                "options": {
                    "LZ4": "LZ4",
                    "ZLIB": "ZLIB",
                    "ZSTD": "ZSTD",
                    "NONE": "NONE"
                },
                "default": "LZ4"
            },
            {
                "key": "log_output_to_console",
                "label": "Log Output to Console / stdout",
                "description": "Log messages will be written to stdout.",
                "type": "bool",
                "default": "TRUE"
            },
            {
                "key": "log_break_on_error",
                "label": "Trigger Debug Break on Error",
                "description": "Trigger a debug break when logging an error.",
                "type": "bool",
                "default": "FALSE"
            },
            {
                "key": "log_output_to_os_debug_string",
                "label": "Log Output to Debug Console",
                "description": "Windows only option. Log messages will be written to the Debug Console with OutputDebugStringA",
                "type": "bool",
                "default": "FALSE"
            },
            {
                "key": "log_file",
                "label": "Log File",
                "description": "When set, log messages will be written to a file at the specified path. Default is: Empty string (file logging disabled).",
                "type": "save_file",
                "default": ""
            },
            {
                "key": "log_detailed",
                "label": "Log Detailed",
                "description": "Include name and line number from the file responsible.",
                "type": "bool",
                "default": "FALSE"
            },
            {
                "key": "log_file_flush_after_write",
                "label": "Log File Flush After Write",
                "description": "Flush the log file to disk after each write when true.",
                "type": "bool",
                "default": "FALSE"
            },
            {
                "key": "log_file_keep_open",
                "label": "Log File Keep Open",
                "description": "Keep the log file open between log messages when true, or close and reopen the log file for each message when false.",
                "type": "bool",
                "default": "TRUE"
            },
            {
                "key": "log_file_create_new",
                "label": "Log File Overwrite",
                "description": "Specifies that log file initialization should overwrite an existing file when true, or append to an existing file when false.",
                "type": "bool",
                "default": "TRUE"
            },
            {
                "key": "log_level",
                "label": "Log Level",
                "description": "Specify the highest level message to log. Options are: debug, info, warning, error, and fatal. The specified level and all levels listed after it will be enabled for logging. For example, choosing the warning level will also enable the error and fatal levels.",
                "type": "enum",
                "options": {
                    "debug": "debug, info, warning, error",
                    "info": "info, warning, error, fatal",
                    "warning": "warning, error, fatal",
                    "error": "error, fatal",
                    "fatal": "fatal"
                },
                "default": "info"
            },
            {
                "key": "memory_tracking_mode",
                "label": "Memory Tracking Mode",
                "description": "Specifies the memory tracking mode to use for detecting modifications to mapped Vulkan memory objects. Available options are: page_guard, assisted, and unassisted.",
                "type": "enum",
                "options": {
                    "page_guard": "page_guard",
                    "assisted": "assisted",
                    "unassisted": "unassisted"
                },
                "default": "page_guard"
            },
            {
                "key": "page_guard_copy_on_map",
                "label": "Page Guard Copy on Map",
                "description": "When the page_guard memory tracking mode is enabled, copies the content of the mapped memory to the shadow memory immediately after the memory is mapped.",
                "type": "bool",
                "default": "TRUE"
            },
            {
                "key": "page_guard_separate_read",
                "label": "Page Guard Separate Read Tracking",
                "description": "When the page_guard memory tracking mode is enabled, copies the content of pages accessed for read from mapped memory to shadow memory on each read. Can overwrite unprocessed shadow memory content when an application is reading from and writing to the same page.",
                "type": "bool",
                "default": "TRUE"
            },
            {
                "key": "page_guard_external_memory",
                "label": "Page Guard External Memory",
                "description": "When the page_guard memory tracking mode is enabled, use the VK_EXT_external_memory_host extension to eliminate the need for shadow memory allocations. For each memory allocation from a host visible memory type, the capture layer will create an allocation from system memory, which it can monitor for write access, and provide that allocation to vkAllocateMemory as external memory. Only available on Windows.",
                "type": "bool",
                "default": "FALSE"
            }
        ]
    }
}
