/*
 * Copyright (c) 2020-2025 Valve Corporation
 * Copyright (c) 2020-2025 LunarG, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This code was generated by Vulkan Configurator
 */

#pragma once

#include <vector>
#include <string>

#include <vulkan/vulkan.h>

struct LayerSettings;

// Possible values for `VK_LAYER_LUNARG_reference_1_2_1` layer `enum_required_only` setting:
static const char* VL_REFERENCE_1_2_1_ENUM_REQUIRED_ONLY_VALUE0 = "value0";
static const char* VL_REFERENCE_1_2_1_ENUM_REQUIRED_ONLY_VALUE1 = "value1";
static const char* VL_REFERENCE_1_2_1_ENUM_REQUIRED_ONLY_VALUE2 = "value2";

// Possible values for `VK_LAYER_LUNARG_reference_1_2_1` layer `enum_with_optional` setting:
static const char* VL_REFERENCE_1_2_1_ENUM_WITH_OPTIONAL_VALUE1 = "value1";
static const char* VL_REFERENCE_1_2_1_ENUM_WITH_OPTIONAL_VALUE2 = "value2";

// Possible values for VK_LAYER_LUNARG_reference_1_2_1 layer flags_required_only setting:
static const char* VL_REFERENCE_1_2_1_FLAGS_REQUIRED_ONLY_FLAG0 = "flag0";
static const char* VL_REFERENCE_1_2_1_FLAGS_REQUIRED_ONLY_FLAG1 = "flag1";
static const char* VL_REFERENCE_1_2_1_FLAGS_REQUIRED_ONLY_FLAG2 = "flag2";

// Possible values for VK_LAYER_LUNARG_reference_1_2_1 layer flags_with_optional setting:
static const char* VL_REFERENCE_1_2_1_FLAGS_WITH_OPTIONAL_FLAG0 = "flag0";
static const char* VL_REFERENCE_1_2_1_FLAGS_WITH_OPTIONAL_FLAG1 = "flag1";

//reference layer (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
// `VK_LAYER_LUNARG_reference_1_2_1` settings for version 1.2.170
// For more information about the layer: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html
struct Reference121SettingData {
	// toogle (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#toogle
	VkBool32 toogle = VK_TRUE;

	// enum (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#enum_required_only
	std::string enum_required_only = VL_REFERENCE_1_2_1_ENUM_REQUIRED_ONLY_VALUE1;

	// enum (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#enum_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#enum
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	std::string enum_with_optional = VL_REFERENCE_1_2_1_ENUM_WITH_OPTIONAL_VALUE1;

	// flags (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#flags_required_only
	std::vector<std::string> flags_required_only = {VL_REFERENCE_1_2_1_FLAGS_REQUIRED_ONLY_FLAG0, VL_REFERENCE_1_2_1_FLAGS_REQUIRED_ONLY_FLAG1};

	// flags (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#flags_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#flags
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	std::vector<std::string> flags_with_optional = {VL_REFERENCE_1_2_1_FLAGS_WITH_OPTIONAL_FLAG0, VL_REFERENCE_1_2_1_FLAGS_WITH_OPTIONAL_FLAG1};

	// String (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#string_required_only
	std::string string_required_only = "A string";

	// String (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#string_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#string
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	std::string string_with_optional = "A string";

	// bool (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#bool_required_only
	VkBool32 bool_required_only = VK_TRUE;

	// bool (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#bool_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#bool
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	VkBool32 bool_with_optional = VK_TRUE;

	// Load file (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#load_file_required_only
	std::string load_file_required_only = "./test.txt";

	// Load file (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#load_file_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#load_file
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	std::string load_file_with_optional = "./test.json";

	// Save file (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#save_file_required_only
	std::string save_file_required_only = "./test.json";

	// Save file (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#save_file_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#save_file
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	std::string save_file_with_optional = "./test.json";

	// Save folder (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#save_folder_required_only
	std::string save_folder_required_only = "./test";

	// Save folder (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#save_folder_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#save_folder
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	std::string save_folder_with_optional = "./test";

	// Integer (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#int_required_only
	int32_t int_required_only = 76;

	// Integer (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#int_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#int
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	int32_t int_with_optional = 76;

	// Float (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#float_required_only
	float float_required_only = 76.500000;

	// Float (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#float_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#float
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	float float_with_optional = 76.500;

	// Frames (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#frames_required_only
	std::string frames_required_only = "76-82,75";

	// Frames (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#frames_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#frames
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	std::string frames_with_optional = "76-82,75";

	// List (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#list_required_only
	std::vector<std::string> list_required_only = {76, 82, stringB, stringC, stringD};

	// List (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#list_with_optional
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#list
	// This setting requires ALL of the following values:
	// - VkBool32 toogle = VK_TRUE;
	std::vector<std::string> list_with_optional = {76, 82, stringB, stringC, stringD};

	// List (BETA) (WINDOWS_X86, WINDOWS_ARM, LINUX, MACOS)
	// Layer setting documentation: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#list_empty
	// For more information about the feature: https://vulkan.lunarg.com/doc/sdk/latest/windows/layer_dummy.html#list
	std::vector<std::string> list_empty = {};

private:
	friend struct LayerSettings;

	std::vector<const char*> flags_required_only_info;
	std::vector<const char*> flags_with_optional_info;
	std::vector<const char*> list_required_only_info;
	std::vector<const char*> list_with_optional_info;
	std::vector<const char*> list_empty_info;
	void init() {
		this->flags_required_only_info.resize(this->flags_required_only.size());
		for (std::size_t i = 0, n = flags_required_only_info.size(); i < n; ++i) {
			this->flags_required_only_info[i] = this->flags_required_only[i].c_str();
		}
		this->flags_with_optional_info.resize(this->flags_with_optional.size());
		for (std::size_t i = 0, n = flags_with_optional_info.size(); i < n; ++i) {
			this->flags_with_optional_info[i] = this->flags_with_optional[i].c_str();
		}
		this->list_required_only_info.resize(this->list_required_only.size());
		for (std::size_t i = 0, n = list_required_only_info.size(); i < n; ++i) {
			this->list_required_only_info[i] = this->list_required_only[i].c_str();
		}
		this->list_with_optional_info.resize(this->list_with_optional.size());
		for (std::size_t i = 0, n = list_with_optional_info.size(); i < n; ++i) {
			this->list_with_optional_info[i] = this->list_with_optional[i].c_str();
		}
		this->list_empty_info.resize(this->list_empty.size());
		for (std::size_t i = 0, n = list_empty_info.size(); i < n; ++i) {
			this->list_empty_info[i] = this->list_empty[i].c_str();
		}
	}
};

// `LayerSettings` allows initializing layer settings from Vulkan application code.
struct LayerSettings {
	Reference121SettingData reference_1_2_1;

	const std::vector<VkLayerSettingEXT>& info() {
		this->reference_1_2_1.init();

		std::vector<VkLayerSettingEXT> init{
			{"VK_LAYER_LUNARG_reference_1_2_1", "toogle", VK_LAYER_SETTING_TYPE_BOOL32_EXT, 1, &this->reference_1_2_1.toogle},
			{"VK_LAYER_LUNARG_reference_1_2_1", "enum_required_only", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.enum_required_only.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "enum_with_optional", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.enum_with_optional.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "flags_required_only", VK_LAYER_SETTING_TYPE_STRING_EXT, static_cast<uint32_t>(this->reference_1_2_1.flags_required_only_info.size()), &this->reference_1_2_1.flags_required_only_info[0]},
			{"VK_LAYER_LUNARG_reference_1_2_1", "flags_with_optional", VK_LAYER_SETTING_TYPE_STRING_EXT, static_cast<uint32_t>(this->reference_1_2_1.flags_with_optional_info.size()), &this->reference_1_2_1.flags_with_optional_info[0]},
			{"VK_LAYER_LUNARG_reference_1_2_1", "string_required_only", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.string_required_only.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "string_with_optional", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.string_with_optional.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "bool_required_only", VK_LAYER_SETTING_TYPE_BOOL32_EXT, 1, &this->reference_1_2_1.bool_required_only},
			{"VK_LAYER_LUNARG_reference_1_2_1", "bool_with_optional", VK_LAYER_SETTING_TYPE_BOOL32_EXT, 1, &this->reference_1_2_1.bool_with_optional},
			{"VK_LAYER_LUNARG_reference_1_2_1", "load_file_required_only", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.load_file_required_only.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "load_file_with_optional", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.load_file_with_optional.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "save_file_required_only", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.save_file_required_only.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "save_file_with_optional", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.save_file_with_optional.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "save_folder_required_only", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.save_folder_required_only.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "save_folder_with_optional", VK_LAYER_SETTING_TYPE_STRING_EXT, 1, this->reference_1_2_1.save_folder_with_optional.c_str()},
			{"VK_LAYER_LUNARG_reference_1_2_1", "int_required_only", VK_LAYER_SETTING_TYPE_INT32_EXT, 1, &this->reference_1_2_1.int_required_only},
			{"VK_LAYER_LUNARG_reference_1_2_1", "int_with_optional", VK_LAYER_SETTING_TYPE_INT32_EXT, 1, &this->reference_1_2_1.int_with_optional},
			{"VK_LAYER_LUNARG_reference_1_2_1", "float_required_only", VK_LAYER_SETTING_TYPE_FLOAT32_EXT, 1, &this->reference_1_2_1.float_required_only},
			{"VK_LAYER_LUNARG_reference_1_2_1", "float_with_optional", VK_LAYER_SETTING_TYPE_FLOAT32_EXT, 1, &this->reference_1_2_1.float_with_optional},
			{"VK_LAYER_LUNARG_reference_1_2_1", "frames_required_only", VK_LAYER_SETTING_TYPE_UINT32_EXT, 1, &this->reference_1_2_1.frames_required_only},
			{"VK_LAYER_LUNARG_reference_1_2_1", "frames_with_optional", VK_LAYER_SETTING_TYPE_UINT32_EXT, 1, &this->reference_1_2_1.frames_with_optional},
			{"VK_LAYER_LUNARG_reference_1_2_1", "list_required_only", VK_LAYER_SETTING_TYPE_STRING_EXT, static_cast<uint32_t>(this->reference_1_2_1.list_required_only_info.size()), &this->reference_1_2_1.list_required_only_info[0]},
			{"VK_LAYER_LUNARG_reference_1_2_1", "list_with_optional", VK_LAYER_SETTING_TYPE_STRING_EXT, static_cast<uint32_t>(this->reference_1_2_1.list_with_optional_info.size()), &this->reference_1_2_1.list_with_optional_info[0]},
			{"VK_LAYER_LUNARG_reference_1_2_1", "list_empty", VK_LAYER_SETTING_TYPE_STRING_EXT, static_cast<uint32_t>(this->reference_1_2_1.list_empty_info.size()), &this->reference_1_2_1.list_empty_info[0]},
		};
		return init;
	};
};

