{
    "configuration": {
        "blacklisted_layers": [
        ],
        "description": "This configuration provides access to the Vulkan Best Practices check. Provides warnings about potential API misuse.",
        "editor_state": "011101111111111111111110011111111111100110111111111111111111111111111111111111111111111111111111111111",
        "layer_options": {
            "VK_LAYER_KHRONOS_validation": {
                "debug_action": {
                    "default": [
                        "VK_DBG_LAYER_ACTION_LOG_MSG"
                    ],
                    "description": "This indicates what action is to be taken when a layer wants to report information",
                    "name": "Debug Action",
                    "options": {
                        "VK_DBG_LAYER_ACTION_BREAK": "Break",
                        "VK_DBG_LAYER_ACTION_CALLBACK": "Callback",
                        "VK_DBG_LAYER_ACTION_DEBUG_OUTPUT": "Debug Output",
                        "VK_DBG_LAYER_ACTION_LOG_MSG": "Log Message"
                    },
                    "type": "multi_enum"
                },
                "disables": {
                    "default": [
                        "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT",
                        "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT",
                        "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT",
                        "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT",
                        "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT"
                    ],
                    "description": "Setting an option here will disable areas of validation",
                    "name": "Disables",
                    "options": {
                        "VALIDATION_CHECK_DISABLE_COMMAND_BUFFER_STATE": "Command Buffer State",
                        "VALIDATION_CHECK_DISABLE_IDLE_DESCRIPTOR_SET": "Idle Descritor Set",
                        "VALIDATION_CHECK_DISABLE_IMAGE_LAYOUT_VALIDATION": "Image Layout Validation",
                        "VALIDATION_CHECK_DISABLE_OBJECT_IN_USE": "Object in Use",
                        "VALIDATION_CHECK_DISABLE_PUSH_CONSTANT_RANGE": "Push Constant Range",
                        "VALIDATION_CHECK_DISABLE_QUERY_VALIDATION": "Query Validation",
                        "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT": "Stateless parameter checks",
                        "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT": "Core validation checks",
                        "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT": "Object lifetime validation",
                        "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT": "Disable Shaders",
                        "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT": "Thread safety checks",
                        "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT": "Handle wrapping"
                    },
                    "type": "multi_enum"
                },
                "enables": {
                    "default": [
                        "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT"
                    ],
                    "description": "Setting an option here will enable specialized areas of validation",
                    "name": "Enables",
                    "options": {
                        "VALIDATION_CHECK_ENABLE_VENDOR_SPECIFIC_ARM": "ARM specific validation",
                        "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT": "Best Practices warning checks",
                        "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT": "Debug printf",
                        "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT": "GPU-Assisted Validation",
                        "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT": "Reserve a descriptorSet binding slot for internal use"
                    },
                    "type": "multi_enum"
                },
                "layer_rank": 0,
                "log_filename": {
                    "default": "stdout",
                    "description": "Specifies the output filename, use stdout to rely on the standard output instead.",
                    "name": "Log Filename",
                    "type": "save_file"
                },
                "message_id_filter": {
                    "default": "",
                    "description": "VUID's to ignore",
                    "name": "Message Filter",
                    "type": "vuid_exclude"
                },
                "report_flags": {
                    "default": [
                        "error",
                        "perf",
                        "info",
                        "warn"
                    ],
                    "description": "The message severity the layer should report back",
                    "name": "Message Severity",
                    "options": {
                        "debug": "Debug",
                        "error": "Error",
                        "info": "Info",
                        "perf": "Perf",
                        "warn": "Warn"
                    },
                    "type": "multi_enum"
                }
            },
            "VK_LAYER_LUNARG_api_dump": {
                "detailed": {
                    "default": "",
                    "description": "Setting this to true causes parameter details to be dumped in addition to API calls",
                    "name": "Detailed Output",
                    "type": "bool"
                },
                "file": {
                    "default": "",
                    "description": "Setting this to true indicates that output should be written to file instead of stdout",
                    "name": "Output to File",
                    "type": "bool"
                },
                "flush": {
                    "default": "",
                    "description": "Setting this to true causes IO to be flushed after each API call that is written",
                    "name": "Log Flush After Write",
                    "type": "bool"
                },
                "indent_size": {
                    "default": "4",
                    "description": "Specifies the number of spaces that a tab is equal to",
                    "name": "Indent Size",
                    "type": "string"
                },
                "layer_rank": 1,
                "log_filename": {
                    "default": "vk_apidump.txt",
                    "description": "Specifies the file to dump to when output files are enabled",
                    "name": "Log Filename",
                    "type": "save_file"
                },
                "name_size": {
                    "default": "32",
                    "description": "The number of characters the name of a variable should consume, assuming more are not required",
                    "name": "Name Size",
                    "type": "string"
                },
                "no_addr": {
                    "default": "",
                    "description": "Setting this to true causes \"address\" to be dumped in place of hex addresses",
                    "name": "Hide Addresses",
                    "type": "bool"
                },
                "output_format": {
                    "default": "Text",
                    "description": "Specifies the format used for output; can be Text (default -- outputs plain text), Html, or Json",
                    "name": "Output Format",
                    "options": {
                        "Html": "Html",
                        "Json": "Json",
                        "Text": "Text"
                    },
                    "type": "enum"
                },
                "output_range": {
                    "default": "0-0",
                    "description": "Comma separated list of frames to output or a range of frames with a start, count, and optional interval separated by a dash. A count of 0 will output every frame after the start of the range. Example: \"5-8-2\" will output frame 5, continue until frame 13, dumping every other frame. Example: \"3,8-2\" will output frames 3, 8, and 9.",
                    "name": "Output Range",
                    "type": "string"
                },
                "show_shader": {
                    "default": "",
                    "description": "Setting this to true causes the shader binary code in pCode to be also written to output",
                    "name": "Show Shader",
                    "type": "bool"
                },
                "show_timestamp": {
                    "default": "",
                    "description": "Show the timestamp of function calls since start in microseconds",
                    "name": "Show Timestamp",
                    "type": "bool"
                },
                "show_types": {
                    "default": "",
                    "description": "Setting this to true causes types to be dumped in addition to values",
                    "name": "Show Types",
                    "type": "bool"
                },
                "type_size": {
                    "default": "0",
                    "description": "The number of characters the name of a type should consume, assuming more are not required",
                    "name": "Type Size",
                    "type": "string"
                },
                "use_spaces": {
                    "default": "",
                    "description": "Setting this to true causes all tab characters to be replaced with spaces",
                    "name": "Use Spaces",
                    "type": "bool"
                }
            },
            "VK_LAYER_LUNARG_device_simulation": {
                "debug_enable": {
                    "default": "0",
                    "description": "Enables debug message output.",
                    "name": "Debug Enable",
                    "type": "bool_numeric"
                },
                "exit_on_error": {
                    "default": "0",
                    "description": "Enables exit-on-error.",
                    "name": "Exit On Error",
                    "type": "bool_numeric"
                },
                "filename": {
                    "default": "",
                    "description": "Name of one or more configuration file(s) to load.",
                    "name": "Filename",
                    "type": "load_file"
                },
                "layer_rank": 2
            },
            "VK_LAYER_LUNARG_gfxreconstruct": {
                "capture_compression_type": {
                    "default": "LZ4",
                    "description": "Compression format to use with the capture file. Valid values are: LZ4, ZLIB, ZSTD, and NONE. Default is: LZ4",
                    "name": "Compression Format",
                    "options": {
                        "LZ4": "LZ4",
                        "NONE": "NONE",
                        "ZLIB": "ZLIB",
                        "ZSTD": "ZSTD"
                    },
                    "type": "enum"
                },
                "capture_file": {
                    "default": "gfxrecon_capture.gfxr",
                    "description": "Path to use when creating the capture file. Default is: gfxrecon_capture.gfxr",
                    "name": "Capture File Name",
                    "type": "save_file"
                },
                "capture_file_flush": {
                    "default": "",
                    "description": "Flush output stream after each packet is written to the capture file. Default is: false.",
                    "name": "Capture File Flush After Write",
                    "type": "bool"
                },
                "capture_file_timestamp": {
                    "default": "",
                    "description": "Add a timestamp (yyyymmddThhmmss) postfix to the capture file name.",
                    "name": "Capture File Name with Timestamp",
                    "type": "bool"
                },
                "capture_frames": {
                    "default": "",
                    "description": "Specify one or more comma-separated frame ranges to capture. Each range will be written to its own file. A frame range can be specified as a single value, to specify a single frame to capture, or as two hyphenated values, to specify the first and last frame to capture. Frame ranges should be specified in ascending order and cannot overlap. Note that frame numbering is 1-based (i.e. the first frame is frame 1). Example: 200,301-305 will create two capture files, one containing a single frame and one containing five frames. Default is: Empty string (all frames are captured).",
                    "name": "Capture Specific Frames",
                    "type": "string"
                },
                "capture_trigger": {
                    "default": "",
                    "description": "Specify a hotkey (any one of F1-F12, TAB, CONTROL) that will be used to start/stop capture. Example: F3 will set the capture trigger to F3 hotkey. One capture file will be generated for each pair of start/stop hotkey presses. Default is: Empty string (hotkey capture trigger is disabled).",
                    "name": "Hotkey Capture Trigger",
                    "options": {
                        "": "None",
                        "CONTROL": "CONTROL",
                        "F1": "F1",
                        "F10": "F10",
                        "F11": "F11",
                        "F12": "F12",
                        "F2": "F2",
                        "F3": "F3",
                        "F4": "F4",
                        "F5": "F5",
                        "F6": "F6",
                        "F7": "F7",
                        "F8": "F8",
                        "F9": "F9",
                        "TAB": "TAB"
                    },
                    "type": "enum"
                },
                "layer_rank": 3,
                "log_break_on_error": {
                    "default": "",
                    "description": "Trigger a debug break when logging an error.",
                    "name": "Trigger Debug Break on Error",
                    "type": "bool"
                },
                "log_file": {
                    "default": "",
                    "description": "When set, log messages will be written to a file at the specified path. Default is: Empty string (file logging disabled).",
                    "name": "Log File",
                    "type": "save_file"
                },
                "log_file_create_new": {
                    "default": "",
                    "description": "Specifies that log file initialization should overwrite an existing file when true, or append to an existing file when false.",
                    "name": "Log File Overwrite",
                    "type": "bool"
                },
                "log_file_flush_after_write": {
                    "default": "",
                    "description": "Flush the log file to disk after each write when true.",
                    "name": "Log File Flush After Write",
                    "type": "bool"
                },
                "log_file_keep_open": {
                    "default": "",
                    "description": "Keep the log file open between log messages when true, or close and reopen the log file for each message when false.",
                    "name": "Log File Keep Open",
                    "type": "bool"
                },
                "log_level": {
                    "default": "info",
                    "description": "Specify the highest level message to log. Options are: debug, info, warning, error, and fatal. The specified level and all levels listed after it will be enabled for logging. For example, choosing the warning level will also enable the error and fatal levels.",
                    "name": "Log Level",
                    "options": {
                        "debug": "debug, info, warning, error",
                        "error": "error, fatal",
                        "fatal": "fatal",
                        "info": "info, warning, error, fatal",
                        "warning": "warning, error, fatal"
                    },
                    "type": "enum"
                },
                "log_output_to_console": {
                    "default": "",
                    "description": "Log messages will be written to stdout.",
                    "name": "Log Output to Console / stdout",
                    "type": "bool"
                },
                "log_output_to_os_debug_string": {
                    "default": "",
                    "description": "Windows only option. Log messages will be written to the Debug Console with OutputDebugStringA",
                    "name": "Log Output to Debug Console",
                    "type": "bool"
                },
                "memory_tracking_mode": {
                    "default": "page_guard",
                    "description": "Specifies the memory tracking mode to use for detecting modifications to mapped Vulkan memory objects. Available options are: page_guard, assisted, and unassisted.",
                    "name": "Memory Tracking Mode",
                    "options": {
                        "assisted": "assisted",
                        "page_guard": "page_guard",
                        "unassisted": "unassisted"
                    },
                    "type": "enum"
                },
                "page_guard_copy_on_map": {
                    "default": "",
                    "description": "When the page_guard memory tracking mode is enabled, copies the content of the mapped memory to the shadow memory immediately after the memory is mapped.",
                    "name": "Page Guard Copy on Map",
                    "type": "bool"
                },
                "page_guard_external_memory": {
                    "default": "",
                    "description": "When the page_guard memory tracking mode is enabled, use the VK_EXT_external_memory_host extension to eliminate the need for shadow memory allocations. For each memory allocation from a host visible memory type, the capture layer will create an allocation from system memory, which it can monitor for write access, and provide that allocation to vkAllocateMemory as external memory. Only available on Windows.",
                    "name": "Page Guard External Memory",
                    "type": "bool"
                },
                "page_guard_separate_read": {
                    "default": "",
                    "description": "When the page_guard memory tracking mode is enabled, copies the content of pages accessed for read from mapped memory to shadow memory on each read. Can overwrite unprocessed shadow memory content when an application is reading from and writing to the same page.",
                    "name": "Page Guard Separate Read Tracking",
                    "type": "bool"
                }
            },
            "VK_LAYER_LUNARG_monitor": {
                "layer_rank": 4
            },
            "VK_LAYER_LUNARG_screenshot": {
                "dir": {
                    "default": "",
                    "description": "This can be set to specify the directory in which to create the screenshot files.",
                    "name": "Directory",
                    "type": "save_folder"
                },
                "format": {
                    "default": "USE_SWAPCHAIN_COLORSPACE",
                    "description": "This can be set to a color space for the output.",
                    "name": "Format",
                    "options": {
                        "SINT": "SINT",
                        "SNORM": "SNORM",
                        "SRGB": "SRGB",
                        "SSCALED": "SSCALED",
                        "UINT": "UINT",
                        "UNORM": "UNORM",
                        "USCALED": "USCALED",
                        "USE_SWAPCHAIN_COLORSPACE": "USE_SWAPCHAIN_COLORSPACE"
                    },
                    "type": "enum"
                },
                "frames": {
                    "default": "",
                    "description": "Comma separated list of frames to output as screen shots or a range of frames with a start, count, and optional interval separated by a dash. Setting the variable to \"all\" will output every frame. Example: \"5-8-2\" will output frame 5, continue until frame 13, dumping every other frame. Example: \"3,8-2\" will output frames 3, 8, and 9.",
                    "name": "Frames",
                    "type": "string"
                },
                "layer_rank": 5
            }
        },
        "name": "All SDK layers",
        "preset": 5
    },
    "file_format_version": "2.0.2"
}
